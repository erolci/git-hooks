#!/bin/sh
set -e

# TODO Lock switching branches while this hook is working
# TODO On Ctrl-C ask if one wants to continue

if [ "$VERBOSITY" -gt 1 ]
then
    shopt=x
    npm_run_args=
else
    shopt=
    npm_run_args="--silent"
fi

uses_jest ()
{
    if echo "$test_script" | grep -q jest
    then
        return 0
    fi

    if echo "$test_script" | grep -Eq '^[[:space:]]*node([[:space:]]+-[^[:space:]]+)*[[:space:]][^[:space:]]+$'
    then
        script="$( echo "$test_script" | grep -Eo '[^[:space:]]+$' )"
        grep -q '\<jest\>' "$script"
        return $?
    fi

    return 1
}

if [ -n "$RANGE" ]
then
    # TODO Shouldn’t this be a global function?
    # TODO Auto–cleanup on next run (keep a pidfile)
    workspace_enabled="$( git config --get --type=bool --default=false "$GLOBAL_CONFIG_NAMESPACE.tmpWorkspace" )"
    if [ "$workspace_enabled" = "true" ]
    then
        mode=tmp_worktree
        # TODO Handle names with spaces
        workspace_files="$( git status --short --ignored | grep '^!! ' | cut -b4- | sed 's~/$~~' )"
        tmp_worktree="$( mktemp -d --suffix="_git-hook-npm-test" )"
        set +e
        git worktree add --detach "$tmp_worktree"
        exit_status=$?
        set -e
        if [ "$exit_status" != 0 ]
        then
            return "$exit_status"
        fi
        # TODO Register a trap to remove the worktree
        cd "$tmp_worktree"
        echo "$workspace_files" |
            while read -r target
            do
                if [ -e "$OLDPWD/$target" ]
                then
                    mkdir -p "$( dirname "$target" )"
                    ln -sv "$OLDPWD/$target" "$target"
                fi
            done
    elif git diff --quiet
    then
        mode=
    else
        mode=stashed
        git stash --keep-index --message="Stashed for running tests"
    fi

    start="$( date +%s )"
    test_script="$( npm run | grep -A1 '^  test$' | tail -n+2 )"
    set +e
    if uses_jest "$test_script"
    then
        # TODO Use --changedSince if forcedFiles is not set
        # TODO If list is too long, fall–back to running all tests
        {
            git config --get "$CONFIG_NAMESPACE.forcedFiles" || :
            git diff --name-only "$RANGE"
        } | $XARGS "$SHELL" -$-"$shopt"c "npm test $npm_run_args -- --ci --color --coverage=no --passWithNoTests --findRelatedTests \"\$@\"" --
    else
        npm test $npm_run_args
    fi
    test_exit_code=$?
    set -e
    if [ "$mode" != "tmp_worktree" ]
    then
        end="$( date +%s )"
        time="$(( end - start ))"
        if [ "$time" -gt 5 ]
        then
            # TODO Don’t printf directly
            printf "Your tests take a while to finish. You might be interested in enabling temporary worktree so that you can continue working (switch branches, commit etc.) while tests run.\n"
            printf "    git config --set %s.tmpWorkspace true\n" "$GLOBAL_CONFIG_NAMESPACE"
        fi
    fi

    if [ "$mode" = "tmp_worktree" ]
    then
        cd -
        git worktree remove -f "$tmp_worktree"
    elif [ "$mode" = "stashed" ]
    then
        git stash pop
    fi

    if [ "$test_exit_code" != "0" ]
    then
        return "$test_exit_code"
    fi
fi
